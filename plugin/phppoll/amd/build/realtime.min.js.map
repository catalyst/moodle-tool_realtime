{"version":3,"sources":["../src/realtime.js"],"names":["define","PubSub","RealTimeEvents","api","params","requestscounter","pollURL","ajax","XMLHttpRequest","json","checkRequestCounter","curDate","Date","curTime","getTime","push","slice","length","publish","CONNECTION_LOST","poll","onreadystatechange","readyState","status","JSON","parse","responseText","setTimeout","timeout","success","events","i","EVENT","fromid","id","url","encodeURIComponent","userid","token","context","component","area","itemid","fromtimestamp","open","send","plugin","init","userId","pollURLParam","setImplementation","subscribe","fromId","fromTimeStamp","abort"],"mappings":"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","sourcesContent":["/**\n * Real time events\n *\n * @module     realtimeplugin_phppoll/realtime\n * @package    realtimeplugin_phppoll\n * @copyright  2020 Marina Glancy\n */\ndefine(['core/pubsub', 'tool_realtime/events', 'tool_realtime/api'], function(PubSub, RealTimeEvents,api) {\n\n    var params;\n    var requestscounter = [];\n    var pollURL;\n    var ajax = new XMLHttpRequest(), json;\n\n    var checkRequestCounter = function() {\n        var curDate = new Date(),\n            curTime = curDate.getTime();\n        requestscounter.push(curTime);\n        requestscounter = requestscounter.slice(-10);\n        // If there were 10 requests in less than 5 seconds, it must be an error. Stop polling.\n        if (requestscounter.length >= 10 && curTime - requestscounter[0] < 5000) {\n            PubSub.publish(RealTimeEvents.CONNECTION_LOST);\n            return false;\n        }\n        return true;\n    };\n\n    var poll = function() {\n        if (!checkRequestCounter()) {\n            // Too many requests, stop polling.\n            return;\n        }\n        ajax.onreadystatechange = function() {\n            if (this.readyState === 4 && this.status === 200) {\n                if (this.status === 200) {\n                    try {\n                        json = JSON.parse(this.responseText);\n                    } catch {\n                        setTimeout(poll, params.timeout);\n                        return;\n                    }\n                    if (!json.success || json.success !== 1) {\n                        // Poll.php returned an error or an exception. Stop trying to poll.\n                        return;\n                    }\n\n                    // Process results - trigger all necessary Javascript/jQuery events.\n                    var events = json.events;\n                    for (var i in events) {\n                        PubSub.publish(RealTimeEvents.EVENT, events[i]);\n                        // Remember the last id.\n                        params.fromid = events[i].id;\n                    }\n                    // And start polling again.\n                    setTimeout(poll, params.timeout);\n                } else {\n                    // Must be a server timeout or loss of network - start new process.\n                    setTimeout(poll, params.timeout);\n                }\n            }\n        };\n        var url = pollURL + '?userid=' + encodeURIComponent(params.userid) + '&token=' +\n            encodeURIComponent(params.token) + '&fromid=' + encodeURIComponent(params.fromid)\n            + '&channel=' + encodeURIComponent(params.context) + ':' +\n            encodeURIComponent(params.component) + ':' + encodeURIComponent(params.area) +\n            ':' + encodeURIComponent(params.itemid) +\n            ':' + encodeURIComponent(params.fromtimestamp);\n        ajax.open('GET', url, true);\n        ajax.send();\n    };\n\n    var plugin =  {\n        init: function(userId, token, pollURLParam, timeout) {\n            if (params && params.userid) {\n                // log console dev error\n            } else {\n                params = {\n                    userid: userId,\n                    token: token,\n                    timeout: timeout,\n                };\n            }\n            pollURL = pollURLParam;\n            api.setImplementation(plugin);\n        },\n        subscribe: function(context, component, area, itemid, fromId, fromTimeStamp) {\n            if (params && params.userid && params.context) {\n                // Already initialised.\n                ajax.abort();\n                params.fromid = fromId;\n                params.context += ('-' + context);\n                params.component += ('-' + component);\n                params.area += ('-' + area);\n                params.itemid += ('-' + itemid);\n                params.fromtimestamp += ('-' + fromTimeStamp);\n            } else {\n                params.context= context;\n                params.component= component;\n                params.area= area;\n                params.itemid= itemid;\n                params.fromid= fromId;\n                params.fromtimestamp = fromTimeStamp;\n            }\n            setTimeout(poll, params.timeout);\n        }\n    };\n\n\n    return plugin;\n});\n"],"file":"realtime.min.js"}